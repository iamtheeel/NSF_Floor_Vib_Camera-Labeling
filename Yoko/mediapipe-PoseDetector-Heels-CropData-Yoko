####
#   Yoko Lu
#   STARS Summer 2025
#   Dr J Lab
###
# Pose tracking with MediaPipe and OCR + CSV output
####

# === Imports ===
import time
import math
import csv
import sys
import os

import cv2
import numpy as np
import pytesseract

import mediapipe as mp
from mediapipe.tasks import python
from mediapipe.tasks.python import vision

# === Fix import path to reach distance_position.py ===
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from distance_position import find_dist_from_y  # ✅ Import your custom function

# === MODEL PATH ===
#model_path = "/Users/yokolu/Desktop/mediapipe_models/pose_landmarker_lite.task"
#model_path = "/Users/yokolu/Desktop/mediapipe_models/pose_landmarker_heavy.task"
model_path = "/Users/yokolu/Desktop/mediapipe_models/pose_landmarker_full.task"

# === VIDEO FILE ===
#video_dir = '/Volumes/MY PASSPORT/SFSU_STARS/2025_STARS_ProfJ/StudentData/25_06_11'
#video_file = 'subject_2_test_1_6-11-2025_5-40-27 PM.asf'
#video_dir = '/Volumes/MY PASSPORT/SFSU_STARS/25_06_18/Subject_1'
#video_file = 'Sub_1_Run_1_6-18-2025_11-45-46 AM.asf'
#fileName = f"{video_dir}/{video_file}"
video_dir = '/Volumes/MY PASSPORT/SFSU_STARS/25_06_18/Subject_1'
#video_dir = '/Volumes/MY PASSPORT/SFSU_STARS/25_06_18/Subject_2'
#video_dir = '/Volumes/MY PASSPORT/SFSU_STARS/25_06_18/Subject_3'
video_file = 'Sub_1_Run_1_6-18-2025_11-45-46 AM.asf'
#video_file = 'Sub_1_Run_2__6-18-2025_11-47-57 AM.asf'
#video_file = 'Sub_1_Run_3__6-18-2025_11-49-29 AM.asf'
#video_file = 'Sub_1_Run_4__6-18-2025_11-50-26 AM.asf'
#video_file = 'sub_2_run_1_6-18-2025_11-36-03 AM.asf'
#video_file = 'sub_2_run_3_pt_1_6-18-2025_11-40-17 AM.asf'
#video_file = 'sub_2_run_3_pt_2_6-18-2025_11-39-54 AM.asf' #####ISSUE WITH FRAME READ#####
#video_file = 'sub_2_run_4_6-18-2025_11-41-35 AM.asf'
#video_file = 'sub_2_run_5_6-18-2025_11-42-48 AM.asf'
#video_file = 'sub_3_run_4_F_6-18-2025_11-26-08 AM.asf'
#video_file = 'sub3_run5_6-18-2025_11-28-28 AM.asf'
#video_file = 'Sub3_run6_6-18-2025_11-32-05 AM.asf'
#video_file = 'Sub3_run7_6-18-2025_11-34-22 AM.asf'

fileName = f"{video_dir}/{video_file}"

# === Open video ===
videoObject = cv2.VideoCapture(fileName)
if not videoObject.isOpened():
    print("❌ Error: Could not open video.")
    exit()

fps = videoObject.get(cv2.CAP_PROP_FPS)
fCount = videoObject.get(cv2.CAP_PROP_FRAME_COUNT)
w = int(videoObject.get(cv2.CAP_PROP_FRAME_WIDTH))
h = int(videoObject.get(cv2.CAP_PROP_FRAME_HEIGHT))

dispFact = 2
displayRez = (int(w / dispFact), int(h / dispFact))

# === MediaPipe Setup ===
BaseOptions = mp.tasks.BaseOptions
PoseLandmarker = mp.tasks.vision.PoseLandmarker
PoseLandmarkerOptions = mp.tasks.vision.PoseLandmarkerOptions
VisionRunningMode = mp.tasks.vision.RunningMode

options = PoseLandmarkerOptions(
    base_options=BaseOptions(model_asset_path=model_path, delegate=BaseOptions.Delegate.CPU),
    running_mode=VisionRunningMode.VIDEO,
    output_segmentation_masks=True
)
landmarker = PoseLandmarker.create_from_options(options)

# === Helper Functions ===
def drawLandmark_circle(frame, landmark, color):
    radius = 15
    thickness = 5
    center = int(landmark.x * w), int(landmark.y * h)
    cv2.circle(frame, center, radius, color, thickness)

def drawLandmark_line(frame, feet, hips, color):
    pt1 = (int(feet.x * w), int(feet.y * h))
    pt2 = (int(hips.x * w), int(hips.y * h))
    cv2.line(frame, pt1, pt2, color, 5)

def drawLandmark_square(frame, minWidth, maxWidth, minHeight, maxHeight):
    color = (0, 0, 255)  # bright red
    thickness = 4
    pt1 = (int(minWidth), int(minHeight))
    pt2 = (int(maxWidth), int(minHeight))
    pt3 = (int(maxWidth), int(maxHeight))
    pt4 = (int(minWidth), int(maxHeight))
    cv2.line(frame, pt1, pt2, color, thickness)
    cv2.line(frame, pt2, pt3, color, thickness)
    cv2.line(frame, pt3, pt4, color, thickness)
    cv2.line(frame, pt4, pt1, color, thickness)

def getDateTime(frame):
    dateTime_img = frame[0:46, 0:384, :]
    dateTime_img_bw = cv2.cvtColor(dateTime_img, cv2.COLOR_BGR2GRAY)
    dateTime_img_bw = 255 - dateTime_img_bw
    data = pytesseract.image_to_data(dateTime_img_bw, output_type=pytesseract.Output.DICT)
    try:
        return f"{data['text'][4]} {data['text'][5]}"
    except:
        return "OCR Error"

def calc_dist(p1, p2):
    return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2 + (p1.z - p2.z)**2)

def crop_with_padding(frame, landmarks):
    frame_height, frame_width = frame.shape[:2]
    core_landmarks = [11, 12, 23, 24, 25, 26, 27, 28, 31, 32]
    min_width = max_width = landmarks[0].x
    min_height = max_height = landmarks[0].y
    for i in core_landmarks:
        x, y = landmarks[i].x, landmarks[i].y
        min_width = min(min_width, x)
        max_width = max(max_width, x)
        min_height = min(min_height, y)
        max_height = max(max_height, y)

    #Normalize values to frame
    min_width = min_width*frame_width
    max_width = max_width*frame_width
    min_height=min_height*frame_height
    max_height=max_height*frame_height
    
    tot_width = max_width - min_width   #total width of cropped frame
    tot_height = max_height - min_height #total height of cropped frame
    
    Ratio = w/h # Ratio of height/width of full sized frame

    current_ratio = tot_width / tot_height #Ratio of height/width of cropped frame
    
    #Finds the center WRT full frame by adding half of width/height of 
    #cropped screen to min height/width in full frame dimensions
    center_width = min_width + tot_width / 2 
    center_height = min_height + tot_height / 2
    
    #Change height/width ratio of cropped frame to match that of full frame
    if current_ratio < Ratio:
    # Too narrow: increase width (or crop height)
        adjust_width = (tot_height * Ratio) / 2
        min_width = center_width - adjust_width
        max_width = center_width + adjust_width
        #print(f"Width adjusted. Min width {min_width}. Max width {max_width}")
    else:
    # Too wide: crop width (or increase height)
        adjust_height = (tot_width / Ratio) / 2
        min_height = center_height - adjust_height
        max_height = center_height + adjust_height
        #print(f"Height adjusted. Min height {min_height}. Max height {max_height}")

    # === SCALE FACTOR ===
    scale_factor = 1.5 #scaled
    #scale_width = 0.3 #person
    #scale_height = 1.3 #person

    new_width = (max_width - min_width) * scale_factor #scaled at 1.5
    new_height = (max_height - min_height) * scale_factor #scaled at 1.5

    #new_width = (max_width - min_width) * scale_width
    #new_height = (max_height - min_height) * scale_height


    min_width = max(0, round(center_width - new_width / 2))
    max_width = min(frame_width, round(center_width + new_width / 2))
    min_height = max(0, round(center_height - new_height / 2))
    max_height = min(frame_height, round(center_height + new_height / 2))

    if max_width <= min_width or max_height <= min_height:
        return 0, frame_width, 0, frame_height
    return min_width, max_width, min_height, max_height

# === CSV SETUP ===
csv_path = "heel_tracking_output.csv"
with open(csv_path, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow([
        "Frame", "Timestamp_ms",
        "LeftHeel_Y", "RightHeel_Y",
        "LeftHeel_Distance", "RightHeel_Distance"
    ])

# === Frame Timing ===
frameTime_ms = 1000 / fps
clipStartTime_s = 60 # sec
clipRunTime_s = 0
clipStartFrame = int(clipStartTime_s * fps)
clipRunFrames = int((fCount - clipStartFrame) if clipRunTime_s == 0 else clipRunTime_s * fps)
videoObject.set(cv2.CAP_PROP_POS_FRAMES, clipStartFrame)

# === Main Frame Loop ===
for i in range(clipRunFrames):
    success, frame = videoObject.read()
    if not success:
        print("⚠️ Frame read failure")
        break

    frame_timestamp_ms = i * frameTime_ms

    mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=frame)
    pose_landmarker_result = landmarker.detect_for_video(mp_image, int(frame_timestamp_ms))

    if len(pose_landmarker_result.pose_landmarks) > 0:
        landmarks = pose_landmarker_result.pose_landmarks[0]
        landmarks_w = pose_landmarker_result.pose_world_landmarks[0]

        min_width, max_width, min_height, max_height = crop_with_padding(frame, landmarks)
        drawLandmark_square(frame, min_width, max_width, min_height, max_height)

        drawLandmark_circle(frame, landmarks[29], [255, 0, 0])
        drawLandmark_circle(frame, landmarks[30], [0, 255, 0])
        drawLandmark_line(frame, landmarks[29], landmarks[23], (255, 100, 100))
        drawLandmark_line(frame, landmarks[30], landmarks[24], (100, 255, 100))

        left_heel_y_norm = landmarks[29].y
        right_heel_y_norm = landmarks[30].y
        left_heel_y_px = left_heel_y_norm * h
        right_heel_y_px = right_heel_y_norm * h
        left_dist = find_dist_from_y(left_heel_y_px, debug=True)
        right_dist = find_dist_from_y(right_heel_y_px, debug=True)

        print(f"frametime: {frame_timestamp_ms:.0f} ms | Left heel Y: {left_heel_y_norm:.4f} → {left_dist:.4f} m | Right heel Y: {right_heel_y_norm:.4f} → {right_dist:.4f} m")

        with open(csv_path, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([
                i,
                frame_timestamp_ms,
                left_heel_y_norm,
                right_heel_y_norm,
                left_dist,
                right_dist
            ])

    frame = cv2.resize(frame, displayRez)
    cv2.imshow("Input", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

videoObject.release()
cv2.destroyAllWindows()


